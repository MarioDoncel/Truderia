{"version":3,"file":"utils.bundle.js","mappings":"mBAAAA,OAAOC,mBAAsBC,GAAUA,EAAMC,eAAe,QAAS,CAAEC,MAAO,WAAYC,SAAU,QAEpGL,OAAOM,KAAO,CACVC,MAAMC,EAAOC,GACTC,YAAW,WACPF,EAAMN,MAAQI,KAAKG,GAAMD,EAAMN,SAChC,IAEPS,UAAUT,IACNA,EAAQA,EAAMU,QAAQ,MAAO,IAEtB,IAAIC,KAAKC,aAAa,QAAS,CAClCV,MAAO,WACPC,SAAU,QACXU,OAAOb,EAAQ,MAEtBc,WAAWd,GACgBA,EAAMU,QAAQ,MAAO,IAAIA,QAAQ,kBAAmB,SAI/EK,aAAaf,GACcA,EAAMU,QAAQ,MAAO,IAAIA,QAAQ,gBAAiB,WAAWA,QAAQ,eAAgB,W","sources":["webpack://truderia/./scripts/utils.js"],"sourcesContent":["window.transformToRealBRL = (value) => value.toLocaleString('pt-br', { style: 'currency', currency: 'BRL' })\r\n\r\nwindow.Mask = {\r\n    apply(input, func) { //aplicador com setTimeout .... input neste caso é definido no HTML com o THIS  .. func a mask que deseja aplicar\r\n        setTimeout(function () {\r\n            input.value = Mask[func](input.value)\r\n        }, 1)\r\n    },\r\n    formatBRL(value) {\r\n        value = value.replace(/\\D/g, \"\")  // Substituir todos os caracteres que não sejam numeros\r\n\r\n        return new Intl.NumberFormat('pt-BR', {\r\n            style: 'currency',\r\n            currency: 'BRL'\r\n        }).format(value / 100) // Formatando para reais\r\n    },\r\n    zipCodeBRL(value) {\r\n        const formattedValue = value.replace(/\\D/g, \"\").replace(/^(\\d{5})(\\d{3})/, \"$1-$2\");\r\n\r\n        return formattedValue;\r\n    },\r\n    telephoneBRL(value) {\r\n        const formattedValue = value.replace(/\\D/g, \"\").replace(/^(\\d{2})(\\d)/g, \"($1) $2\").replace(/(\\d)(\\d{4})$/, \"$1-$2\");\r\n\r\n        return formattedValue;\r\n    },\r\n}\r\n\r\nexport function removeAcento(text) {\r\n    text = text.replace(new RegExp('[ÁÀÂÃ]', 'gi'), 'a');\r\n    text = text.replace(new RegExp('[ÉÈÊ]', 'gi'), 'e');\r\n    text = text.replace(new RegExp('[ÍÌÎ]', 'gi'), 'i');\r\n    text = text.replace(new RegExp('[ÓÒÔÕ]', 'gi'), 'o');\r\n    text = text.replace(new RegExp('[ÚÙÛÜ]', 'gi'), 'u');\r\n    text = text.replace(new RegExp('[Ç]', 'gi'), 'c');\r\n    return text;\r\n}\r\n\r\nexport function getRandomIntInclusive(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport const alerts = {\r\n    wrongCep: `CEP inválido.`,\r\n    cepNotFound: `CEP não encontrado para calcular a taxa de entrega. \\nSem problemas!\\nPode seguir com o pedido e resolveremos essa questão através do Whatsapp. =)`,\r\n    blankFields: `Favor preencher todos os campos obrigatórios, são aqueles que contém  <span style=\"color:red; font-weight:bold\">*</span> .`,\r\n    addresBlank: `Favor preencher todos os campos obrigatórios de endereço marcados com <span style=\"color:red; font-weight:bold\">*</span> para opção de entrega.`,\r\n    noReceiveMethod: `Favor escolher uma forma de recebimento do pedido.`,\r\n    noPaymentMethod: `Favor escolher uma forma de pagamento.`,\r\n    deliveryTaxNotFound: `Não encontramos a taxa de entrega para este bairro. \\n Sem problemas !! Pode seguir com o pedido e resolveremos essa questão através do Whatsapp. =)`,\r\n}"],"names":["window","transformToRealBRL","value","toLocaleString","style","currency","Mask","apply","input","func","setTimeout","formatBRL","replace","Intl","NumberFormat","format","zipCodeBRL","telephoneBRL"],"sourceRoot":""}