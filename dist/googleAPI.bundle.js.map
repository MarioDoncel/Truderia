{"version":3,"file":"googleAPI.bundle.js","mappings":"MAgCA,IAAIA,EACAC,EACAC,EACAC,EAEJC,OAAOC,iBAAmB,KACxBJ,EAAgBK,SAASC,cAAc,sBACvCL,EAAgBI,SAASC,cAAc,2BACvCJ,EAAcG,SAASC,cAAc,mBAErC,IAAIC,EAAa,IAAIC,OAAOC,KAAKC,aAC/B,IAAIF,OAAOC,KAAKE,QAAQ,UAAU,UAClC,IAAIH,OAAOC,KAAKE,QAAQ,SAAW,WAIrCZ,EAAe,IAAIS,OAAOC,KAAKG,OAAOC,aAAab,EAAe,CAChEc,sBAAuB,CAAEC,QAAS,MAClCC,OAAQ,CAAC,qBAAsB,YAC/BC,MAAO,CAAC,WACRC,OAAQX,IAMVR,EAAaoB,YAAY,gBAAiBC,gBAG5CjB,OAAOiB,cAAgB,KAErB,MAAMC,EAAQtB,EAAauB,WAC3B,IAAIC,EAAW,GACXC,EAAW,GAKf,IAAK,MAAMC,KAAaJ,EAAMK,mBAI5B,OAFsBD,EAAUR,MAAM,IAGpC,IAAK,gBACHM,EAAW,GAAGE,EAAUE,aAAaJ,IACrC,MAGF,IAAK,QACHA,GAAYE,EAAUG,WACtB,MAGF,IAAK,cACHJ,EAAW,GAAGC,EAAUE,YAAYH,IACpC,MAGF,IAAK,qBACHA,EAAW,GAAGA,KAAYC,EAAUE,YACpC,MAEF,IAAK,sBACHtB,SAASC,cAAc,wBAAwBuB,MAAQ,GAAGJ,EAAUE,YACpEG,aAAaC,QAAQ,SAAUC,KAAKC,UAAUC,OAAOC,eAAeV,EAAUE,aAMpF3B,EAAc6B,MAAQN,EACtBO,aAAaC,QAAQ,SAAUC,KAAKC,UAAUC,OAAOE,aAAab,KAC/DC,IAAUtB,EAAY2B,MAAQL,GAMjCvB,EAAcoC,QACdC,mB","sources":["webpack://truderia/./scripts/googleAPI.js"],"sourcesContent":["\r\n// if(navigator.geolocation){\r\n//     navigator.geolocation.getCurrentPosition((position) => {\r\n//         localStorage.setItem('latitude', JSON.stringify(position.coords.latitude))\r\n//         localStorage.setItem('longitude', JSON.stringify(position.coords.longitude))\r\n//         }, \r\n//         (error) => console.log(error), \r\n//         {\r\n//             enableHighAccuracy:true,\r\n//             timeout: 5000\r\n//         })\r\n// }\r\n\r\n// Initialize and add the map\r\nfunction initMap() {\r\n  // The location of Uluru\r\n  const uluru = { lat: -22.3586012, lng: -47.392323 };\r\n  // The map, centered at Uluru\r\n  const map = new google.maps.Map(document.getElementById(\"map\"), {\r\n    zoom: 17,\r\n    center: uluru,\r\n  });\r\n  // The marker, positioned at Uluru\r\n  const marker = new google.maps.Marker({\r\n    position: uluru,\r\n    map: map,\r\n  });\r\n}\r\n\r\n\r\n// Google Autocomplete\r\n\r\nlet autocomplete;\r\nlet address1Field;\r\nlet address2Field;\r\nlet postalField;\r\n\r\nwindow.initAutocomplete = () => {\r\n  address1Field = document.querySelector(\"input[name=street]\") ;\r\n  address2Field = document.querySelector(\"input[name=houseNumber]\") ;\r\n  postalField = document.querySelector(\"input[name=cep]\") ;\r\n\r\n  let cityBounds = new google.maps.LatLngBounds(\r\n    new google.maps.LatLng(-22.40119,-47.42764 ),\r\n    new google.maps.LatLng(-22.32880, -47.31846));\r\n\r\n  // Create the autocomplete object, restricting the search predictions to\r\n  // addresses in the US and Canada.\r\n  autocomplete = new google.maps.places.Autocomplete(address1Field, {\r\n    componentRestrictions: { country: \"br\" },\r\n    fields: [\"address_components\", \"geometry\"],\r\n    types: [\"address\"],\r\n    bounds: cityBounds,\r\n  });\r\n  \r\n\r\n  // When the user selects an address from the drop-down, populate the\r\n  // address fields in the form.\r\n  autocomplete.addListener(\"place_changed\", fillInAddress);\r\n}\r\n\r\nwindow.fillInAddress = () => {\r\n  // Get the place details from the autocomplete object.\r\n  const place = autocomplete.getPlace();\r\n  let address1 = \"\";\r\n  let postcode = \"\";\r\n  // Get each component of the address from the place details,\r\n  // and then fill-in the corresponding field on the form.\r\n  // place.address_components are google.maps.GeocoderAddressComponent objects\r\n  // which are documented at http://goo.gle/3l5i5Mr\r\n  for (const component of place.address_components) {\r\n    // @ts-ignore remove once typings fixed\r\n    const componentType = component.types[0];\r\n\r\n    switch (componentType) {\r\n      case \"street_number\": {\r\n        address1 = `${component.long_name} ${address1}`;\r\n        break;\r\n      }\r\n\r\n      case \"route\": {\r\n        address1 += component.short_name;\r\n        break;\r\n      }\r\n\r\n      case \"postal_code\": {\r\n        postcode = `${component.long_name}${postcode}`;\r\n        break;\r\n      }\r\n\r\n      case \"postal_code_suffix\": {\r\n        postcode = `${postcode}-${component.long_name}`;\r\n        break;\r\n      }\r\n      case \"sublocality_level_1\": {\r\n        document.querySelector(\"input[name=district]\").value = `${component.long_name}`;\r\n        localStorage.setItem('client', JSON.stringify(Client.updateDistrict(component.long_name)))\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  address1Field.value = address1;\r\n  localStorage.setItem('client', JSON.stringify(Client.updateStreet(address1)))\r\n  if(postcode) postalField.value = postcode;\r\n  \r\n\r\n  // After filling the form with address components from the Autocomplete\r\n  // prediction, set cursor focus on the second address line to encourage\r\n  // entry of subpremise information such as apartment, unit, or floor number.\r\n  address2Field.focus();\r\n  getDeliveryTax()\r\n}\r\n"],"names":["autocomplete","address1Field","address2Field","postalField","window","initAutocomplete","document","querySelector","cityBounds","google","maps","LatLngBounds","LatLng","places","Autocomplete","componentRestrictions","country","fields","types","bounds","addListener","fillInAddress","place","getPlace","address1","postcode","component","address_components","long_name","short_name","value","localStorage","setItem","JSON","stringify","Client","updateDistrict","updateStreet","focus","getDeliveryTax"],"sourceRoot":""}